# Sistema de Gesti√≥n de Base de Datos - Monitoreo Red IP
# Script principal con detecci√≥n inteligente de dependencias

param(
    [string]$command = "status"
)

function Show-Help {
    Write-Host "Sistema de Gesti√≥n - Monitoreo Red IP" -ForegroundColor Cyan
    Write-Host "======================================" -ForegroundColor Cyan
    Write-Host "Uso: .\manage-db.ps1 <comando>`n" -ForegroundColor Yellow
    
    Write-Host "Comandos disponibles:" -ForegroundColor Green
    Write-Host "  start           - Iniciar servicios con verificaci√≥n inteligente" -ForegroundColor White
    Write-Host "  safe-shutdown   - Apagar con backup y preservar dependencias" -ForegroundColor White
    Write-Host "  restart         - Reiniciar servicios" -ForegroundColor White
    Write-Host "  backup          - Crear backup manual" -ForegroundColor White
    Write-Host "  restore         - Restaurar √∫ltimo backup" -ForegroundColor White
    Write-Host "  status          - Estado de servicios" -ForegroundColor White
    Write-Host "  list-backups    - Listar backups disponibles" -ForegroundColor White
    Write-Host "  logs            - Ver logs en tiempo real" -ForegroundColor White
    Write-Host "  setup-pgadmin   - Configurar PgAdmin persistente" -ForegroundColor White
    Write-Host "  force-install-deps - Forzar reinstalaci√≥n de dependencias" -ForegroundColor White
    Write-Host "  force-init-auth - Forzar reinicializaci√≥n datos auth" -ForegroundColor White
}

function Test-Dependencies {
    Write-Host "üîç Verificando dependencias del backend..." -ForegroundColor Cyan
    try {
        $checkScript = @"
import sys
dependencies = ['fastapi', 'sqlalchemy', 'psycopg2', 'jose', 'passlib']
missing = []
for dep in dependencies:
    try:
        __import__(dep)
    except ImportError:
        missing.append(dep)

if missing:
    print(f'MISSING:{",".join(missing)}')
else:
    print('OK')
"@
        
        $result = docker exec monitoreo_backend python -c $checkScript
        return $result
    }
    catch {
        return "ERROR:$_"
    }
}

function Install-Dependencies {
    Write-Host "üì¶ Instalando dependencias..." -ForegroundColor Yellow
    try {
        docker exec monitoreo_backend pip install --upgrade pip
        docker exec monitoreo_backend pip install -r /app/requirements.txt
        return $true
    }
    catch {
        Write-Host "‚ùå Error instalando dependencias: $_" -ForegroundColor Red
        return $false
    }
}

function Test-AuthData {
    Write-Host "üîç Verificando datos de autenticaci√≥n..." -ForegroundColor Cyan
    try {
        $userCount = docker exec monitoreo_postgres psql -U monitoreo_user -d monitoreo_dev -t -c "SELECT COUNT(*) FROM seguridad.usuario;" 2>$null
        if ($LASTEXITCODE -eq 0 -and $userCount -match '\d+') {
            return [int]$userCount
        }
        return 0
    }
    catch {
        return 0
    }
}

function Initialize-AuthData {
    Write-Host "üóÉÔ∏è Inicializando datos de autenticaci√≥n..." -ForegroundColor Yellow
    try {
        $sqlFile = ".\database\init-data\01-autenticacion-data.sql"
        if (Test-Path $sqlFile) {
            Get-Content $sqlFile | docker exec -i monitoreo_postgres psql -U monitoreo_user -d monitoreo_dev
            Write-Host "‚úÖ Datos de autenticaci√≥n inicializados" -ForegroundColor Green
            return $true
        }
        else {
            Write-Host "‚ùå Archivo de datos no encontrado: $sqlFile" -ForegroundColor Red
            return $false
        }
    }
    catch {
        Write-Host "‚ùå Error inicializando datos: $_" -ForegroundColor Red
        return $false
    }
}

# MENU PRINCIPAL
switch ($command) {
    "start" {
        Write-Host "üöÄ Iniciando servicios con verificaci√≥n inteligente..." -ForegroundColor Green
        
        # Iniciar servicios
        docker-compose up -d
        
        # Esperar que servicios est√©n listos
        Write-Host "‚è≥ Esperando que servicios est√©n listos..." -ForegroundColor Yellow
        Start-Sleep -Seconds 15
        
        # VERIFICACI√ìN INTELIGENTE DE DEPENDENCIAS
        $depsResult = Test-Dependencies
        if ($depsResult -eq "OK") {
            Write-Host "‚úÖ Todas las dependencias est√°n instaladas" -ForegroundColor Green
        }
        elseif ($depsResult -like "MISSING:*") {
            Write-Host "‚ö†Ô∏è  Faltan dependencias: $($depsResult.Replace('MISSING:',''))" -ForegroundColor Yellow
            if (Install-Dependencies) {
                Write-Host "‚úÖ Dependencias instaladas correctamente" -ForegroundColor Green
            }
        }
        else {
            Write-Host "‚ö†Ô∏è  No se pudo verificar dependencias, instalando preventivamente..." -ForegroundColor Yellow
            Install-Dependencies
        }
        
        # VERIFICACI√ìN INTELIGENTE DE DATOS DE AUTENTICACI√ìN
        $userCount = Test-AuthData
        if ($userCount -gt 0) {
            Write-Host "‚úÖ Datos de autenticaci√≥n existen ($userCount usuarios)" -ForegroundColor Green
        }
        else {
            Write-Host "‚ö†Ô∏è  No hay datos de autenticaci√≥n, inicializando..." -ForegroundColor Yellow
            Initialize-AuthData
        }
        
        Write-Host "`nüéâ Todos los servicios iniciados y configurados" -ForegroundColor Green
        docker-compose ps
    }
    
    "safe-shutdown" {
        Write-Host "üõë Apagado seguro de servicios..." -ForegroundColor Yellow
        
        # Crear backup antes de apagar
        Write-Host "üíæ Creando backup de base de datos..." -ForegroundColor Cyan
        $backupResult = .\scripts\backup-db.ps1
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Backup creado correctamente" -ForegroundColor Green
        }
        else {
            Write-Host "‚ö†Ô∏è  Backup fall√≥, pero continuando con apagado..." -ForegroundColor Yellow
        }
        
        # Detener servicios (las dependencias persisten en el volumen)
        docker-compose down
        
        Write-Host "‚úÖ Servicios apagados correctamente" -ForegroundColor Green
        Write-Host "üì¶ Dependencias preservadas en volumen Docker" -ForegroundColor Cyan
        Write-Host "üíæ Backup de BD guardado en ./database/backups/" -ForegroundColor Cyan
    }
    
    "restart" {
        Write-Host "üîÑ Reiniciando servicios..." -ForegroundColor Yellow
        docker-compose restart
        Write-Host "‚úÖ Servicios reiniciados" -ForegroundColor Green
    }
    
    "backup" {
        Write-Host "üíæ Creando backup manual..." -ForegroundColor Cyan
        .\scripts\backup-db.ps1
    }
    
    "restore" {
        Write-Host "üîÑ Restaurando √∫ltimo backup..." -ForegroundColor Cyan
        .\scripts\restore-db.ps1
    }
    
    "status" {
        Write-Host "üìä Estado de los servicios:" -ForegroundColor Cyan
        docker-compose ps
        
        # Informaci√≥n adicional
        Write-Host "`nüîç Informaci√≥n adicional:" -ForegroundColor Cyan
        try {
            $userCount = Test-AuthData
            Write-Host "   Usuarios en sistema: $userCount" -ForegroundColor White
            
            $depsResult = Test-Dependencies
            if ($depsResult -eq "OK") {
                Write-Host "   Dependencias: ‚úÖ Todas instaladas" -ForegroundColor Green
            }
            else {
                Write-Host "   Dependencias: ‚ö†Ô∏è  Verificar instalaci√≥n" -ForegroundColor Yellow
            }
        }
        catch {
            Write-Host "   No se pudo obtener informaci√≥n adicional" -ForegroundColor Red
        }
    }
    
    "list-backups" {
        Write-Host "üìÇ Backups disponibles:" -ForegroundColor Cyan
        if (Test-Path ".\database\backups") {
            Get-ChildItem ".\database\backups" -Filter "*.backup" | Sort-Object LastWriteTime -Descending | Format-Table Name, LastWriteTime, Length -AutoSize
        }
        else {
            Write-Host "No hay backups disponibles" -ForegroundColor Yellow
        }
    }
    
    "logs" {
        Write-Host "üìã Mostrando logs en tiempo real (Ctrl+C para salir)..." -ForegroundColor Cyan
        docker-compose logs -f
    }
    
    "setup-pgadmin" {
        Write-Host "‚öôÔ∏è Configurando PgAdmin persistente..." -ForegroundColor Cyan
        if (Test-Path ".\database\pgadmin-servers.json") {
            Write-Host "‚úÖ Configuraci√≥n de PgAdmin ya existe" -ForegroundColor Green
        }
        else {
            Write-Host "‚ùå Archivo de configuraci√≥n no encontrado" -ForegroundColor Red
        }
    }
    
    "force-install-deps" {
        Write-Host "üî® Forzando reinstalaci√≥n de dependencias..." -ForegroundColor Cyan
        if (Install-Dependencies) {
            Write-Host "‚úÖ Dependencias reinstaladas forzosamente" -ForegroundColor Green
        }
    }
    
    "force-init-auth" {
        Write-Host "üî® Forzando reinicializaci√≥n de datos de autenticaci√≥n..." -ForegroundColor Cyan
        if (Initialize-AuthData) {
            Write-Host "‚úÖ Datos de autenticaci√≥n reinicializados" -ForegroundColor Green
        }
    }
    
    default {
        Write-Host "‚ùå Comando '$command' no reconocido`n" -ForegroundColor Red
        Show-Help
    }
}
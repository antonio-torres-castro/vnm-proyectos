#!/usr/bin/env python3
"""
Instalador de Configuraci√≥n VS Code - FullStack Debug
Copia autom√°ticamente los archivos de configuraci√≥n desde vscode-config/ a .vscode/
Autor: MiniMax Agent
"""

import os
import shutil
import json
from pathlib import Path
import platform

def crear_backup_si_existe():
    """Crea backup de la configuraci√≥n existente si existe"""
    vscode_dir = Path("../.vscode")
    if vscode_dir.exists():
        backup_dir = Path("../.vscode_backup")
        if backup_dir.exists():
            shutil.rmtree(backup_dir)
        shutil.copytree(vscode_dir, backup_dir)
        print(f"‚úÖ Backup creado en: {backup_dir}")
        return True
    return False

def verificar_estructura():
    """Verifica que existe la carpeta vscode-config con los archivos necesarios"""
    # Buscar vscode-config en el directorio padre (vnm-proyectos)
    config_dir = Path("../vscode-config")
    
    if not config_dir.exists():
        print("‚ùå ERROR: Carpeta 'vscode-config' no encontrada")
        print("   Ubicaci√≥n esperada: vnm-proyectos/vscode-config/")
        print("   Ejecutando desde: vnm-proyectos/automate/")
        return False
    
    archivos_requeridos = [
        "launch.json",
        "tasks.json", 
        "settings.json",
        "extensions.json"
    ]
    
    archivos_faltantes = []
    for archivo in archivos_requeridos:
        if not (config_dir / archivo).exists():
            archivos_faltantes.append(archivo)
    
    if archivos_faltantes:
        print(f"‚ùå ERROR: Archivos faltantes en vscode-config/:")
        for archivo in archivos_faltantes:
            print(f"   - {archivo}")
        return False
    
    print("‚úÖ Estructura vscode-config verificada correctamente")
    return True

def instalar_configuracion():
    """Instala la configuraci√≥n copiando archivos desde vscode-config/ a .vscode/"""
    
    # Buscar vscode-config en el directorio padre
    config_dir = Path("../vscode-config")
    
    # Directorio .vscode en vnm-proyectos (directorio padre)
    vscode_dir = Path("../.vscode")
    
    # Crear directorio .vscode si no existe
    vscode_dir.mkdir(exist_ok=True)
    
    archivos_copiados = []
    errores = []
    
    # Copiar cada archivo
    for archivo_config in config_dir.glob("*.json"):
        archivo_destino = vscode_dir / archivo_config.name
        
        try:
            shutil.copy2(archivo_config, archivo_destino)
            archivos_copiados.append(archivo_config.name)
            print(f"‚úÖ Copiado: {archivo_config.name}")
            
            # Verificar que el JSON es v√°lido
            with open(archivo_destino, 'r', encoding='utf-8') as f:
                json.load(f)
            
        except json.JSONDecodeError as e:
            errores.append(f"‚ùå Error JSON en {archivo_config.name}: {e}")
        except Exception as e:
            errores.append(f"‚ùå Error copiando {archivo_config.name}: {e}")
    
    return archivos_copiados, errores

def ajustar_para_windows():
    """Ajusta la configuraci√≥n espec√≠ficamente para Windows"""
    sistema = platform.system()
    
    if sistema == "Windows":
        settings_file = Path("../.vscode/settings.json")
        
        if settings_file.exists():
            try:
                with open(settings_file, 'r', encoding='utf-8') as f:
                    settings = json.load(f)
                
                # Ajustar ruta del int√©rprete de Python para Windows
                if "python.defaultInterpreterPath" in settings:
                    python_path = settings["python.defaultInterpreterPath"]
                    if "/bin/python" in python_path:
                        # Cambiar de Linux a Windows
                        settings["python.defaultInterpreterPath"] = python_path.replace("/bin/python", "\\Scripts\\python.exe")
                        
                        with open(settings_file, 'w', encoding='utf-8') as f:
                            json.dump(settings, f, indent=4)
                        
                        print("‚úÖ Configuraci√≥n ajustada para Windows")
                
            except Exception as e:
                print(f"‚ö†Ô∏è Warning: No se pudo ajustar configuraci√≥n para Windows: {e}")

def verificar_instalacion():
    """Verifica que la instalaci√≥n fue exitosa"""
    vscode_dir = Path("../.vscode")
    
    if not vscode_dir.exists():
        return False, ["Directorio .vscode no fue creado"]
    
    archivos_esperados = ["launch.json", "tasks.json", "settings.json", "extensions.json"]
    errores = []
    
    for archivo in archivos_esperados:
        archivo_path = vscode_dir / archivo
        if not archivo_path.exists():
            errores.append(f"Archivo {archivo} no fue instalado")
        else:
            # Verificar que es JSON v√°lido
            try:
                with open(archivo_path, 'r', encoding='utf-8') as f:
                    json.load(f)
            except json.JSONDecodeError:
                errores.append(f"Archivo {archivo} tiene formato JSON inv√°lido")
    
    return len(errores) == 0, errores

def mostrar_instrucciones_uso():
    """Muestra las instrucciones de uso despu√©s de la instalaci√≥n"""
    print("\n" + "="*60)
    print("üéØ CONFIGURACI√ìN INSTALADA - INSTRUCCIONES DE USO")
    print("="*60)
    
    print("\nüîß Pr√≥ximos pasos:")
    print("1. Abre VS Code en este directorio")
    print("2. Acepta instalar las extensiones recomendadas")
    print("3. Presiona F5 para debugging")
    print("4. Selecciona: 'FullStack Debug - Ambos simult√°neamente'")
    
    print("\nüöÄ Configuraciones disponibles:")
    print("‚Ä¢ Frontend Debug - Solo React")
    print("‚Ä¢ Backend Debug - Solo FastAPI") 
    print("‚Ä¢ FullStack Debug - Ambos simult√°neamente ‚≠ê")
    print("‚Ä¢ FullStack Debug - Compound")
    
    print("\nüìã Requisitos:")
    print("‚Ä¢ Docker Desktop ejecut√°ndose")
    print("‚Ä¢ Puerto 3000 y 8000 disponibles")
    print("‚Ä¢ Extensiones de VS Code instaladas")
    
    print("\n‚úÖ El error 'Attribute request is missing' est√° solucionado")

def main():
    """Funci√≥n principal del instalador"""
    print("="*60)
    print("üîß INSTALADOR DE CONFIGURACI√ìN VS CODE - FULLSTACK DEBUG")
    print("="*60)
    print("Autor: MiniMax Agent")
    print(f"Sistema detectado: {platform.system()}")
    print("")
    
    # Verificar estructura
    if not verificar_estructura():
        return 1
    
    # Crear backup si existe configuraci√≥n previa
    backup_creado = crear_backup_si_existe()
    if backup_creado:
        print("")
    
    # Instalar configuraci√≥n
    print("üîÑ Instalando configuraci√≥n...")
    archivos_copiados, errores = instalar_configuracion()
    
    if errores:
        print("\n‚ùå ERRORES durante la instalaci√≥n:")
        for error in errores:
            print(f"   {error}")
        return 1
    
    # Ajustes espec√≠ficos para Windows
    ajustar_para_windows()
    
    # Verificar instalaci√≥n
    print("\nüîç Verificando instalaci√≥n...")
    instalacion_ok, errores_verificacion = verificar_instalacion()
    
    if not instalacion_ok:
        print("\n‚ùå ERRORES en la verificaci√≥n:")
        for error in errores_verificacion:
            print(f"   {error}")
        return 1
    
    print("\n‚úÖ INSTALACI√ìN COMPLETADA EXITOSAMENTE")
    print(f"üìÅ Archivos instalados: {', '.join(archivos_copiados)}")
    
    mostrar_instrucciones_uso()
    
    return 0

if __name__ == "__main__":
    try:
        exit_code = main()
        exit(exit_code)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è Instalaci√≥n cancelada por el usuario")
        exit(1)
    except Exception as e:
        print(f"\n‚ùå ERROR INESPERADO: {e}")
        exit(1)